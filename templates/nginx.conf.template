user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    server_names_hash_bucket_size 64;

    # Docker DNS resolver
    # If there are any variables in proxy_pass, a resolver will be required
    # 127.0.0.11 is a Docker container's default resolver
    # https://stackoverflow.com/a/22259088/13461208
    resolver 127.0.0.11;

    # Gzip settings
    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    # Dynamic upstream based on requested domain
     map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    server {
        listen 80 default_server;
        server_name _;

        # add_header X-Debug-Host-80 $host;
        # add_header X-Debug-Port-80 $server_port;

        # Dynamically set the upstream based on the requested host
        set $upstream_host $host;

        location = ${NGINX_PROXY_PASS_LOCATION} {
            include proxy_pass_include;
        }

        # Catch-all for other routes
        location / {
            return 404 "Not Found";
            add_header Content-Type text/plain;
        }
    }
}
